---
name: Все есть выражение
theory: |

  Кроме того что в Ruby все есть объект, практически все еще и выражение. Что это значит? Возьмем для примера условные конструкции, например `if`. `if` в большинстве языков это конструкция языка, которая может появляться только в определенных местах. Ее нельзя использовать в составе каких-то выражений. В Ruby это не так:

  ```ruby
  # так как if выражение, значит
  # мы можем присваивать результат его выполнения
  a = if 5 > 3
    'yes'
  else
    'no'
  end

  puts a # => 'yes'
  ```

  Тоже самое касается любых других конструкций, вплоть до определения функций/методов, модулей, классов:

  ```ruby
  # в f попадает не сама функция, а ее имя в виде символа
  f = def foo
  end
  puts f # :foo
  ```

  Зачем это нужно? Чем больше языковых конструкций реализовано в виде выражений, тем более **выразительным** является язык. В таком языке больше возможностей за счет комбинирования конструкций как в примере с `if`.

instructions: |

  Реализуйте и экспортируйте по умолчанию функцию, которая меняет в строке регистр каждой буквы на противоположный.

  ```ruby
  invert_case('Hello, World!'); // hELLO, wORLD!
  invert_case('I loVe JS');     // i LOvE js
  ```

  Полезные методы:

  * `upcase()` – перевод строки в верхний регистр
  * `downcase()` – перевод строки в нижний регистр

# definitions:
#   Объекты первого рода

tips: []
