---

name: Первая функция
theory: |

  Начнем сразу с комплексного примера, включающего в себя определение функции, переменной и простые арифметические операции. Посмотрим на синтаксис и разберём некоторые интересные особенности Ruby. Ниже дано определение функции, находящей среднее арифметическое:

  ```ruby
  # def – определение функции
  def find_average(a, b)
    # создание переменной sum
    sum = a + b
    # преобразование к Float
    sum.to_f / 2
  end

  find_average(3, 1) # 2.0
  find_average(1, 2) # 1.5

  # Можно вызывать и так
  find_average 3, 1
  find_average 1, 2

  # ArgumentError (wrong number of arguments (given 1, expected 2)
  find_average(1)
  ```

  Сначала пара слов о стиле. В Ruby существует ровно один общепринятый стиль оформления кода, которого [придерживается](https://ukupat.github.io/tabs-or-spaces/) все комьюнити:

  * Отступы — два пробела
  * Для определения имен переменных и функций используется snake_case
  * Определение классов — CamelCase

  Определение функции начинается ключевым словом `def`, за которым идет имя функции и её параметры. В конце добавляется `end`. В отличие от своих собратьев, в Ruby не обязательно писать ключевое слово `return`. Как и в Smalltalk, в Ruby функции всегда возвращают результат последнего выполненного выражения. Иногда `return` всё же используется, когда нужно досрочно выйти из функции. В остальных случаях его опускают.

  Определение переменных в Ruby крайне простое. Достаточно написать имя и присвоить ему любое значение. Затем переменную можно использовать и менять как угодно и где угодно в поле её видимости.

  ```ruby
  sum = a + b
  ```

  Необычно в примере выше может выглядеть код `sum.to_f`. Здесь происходит вызов метода `to_f()` у числа, записанного в `sum`. Для чего это нужно? В Ruby при делении целого числа на выходе всегда получается целое число. Если при этом была дробная часть, она отбрасывается:

  ```ruby
  3 / 2 # 1
  3.to_f / 2 # 1.5
  ```

  По своему смыслу функция `find_average()` должна возвращать число с плавающей точкой, поэтому такое преобразование необходимо.

instructions: |

  Реализуйте функцию `double()`, которая удваивает любое переданное ей число и возвращает его:

  ```ruby
  double(3) # 6
  double(8) # 16
  ```

tips: []
