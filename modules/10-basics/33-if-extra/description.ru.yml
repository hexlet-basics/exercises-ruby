---

name: Условные конструкции (альтернативные варианты)
theory: |

  Ruby поддерживает множество видов условных конструкций, которые иногда способны сделать код чуть проще и прямолинейнее. Все они встречаются в реальном коде регулярно.

  ## Тернарный оператор

  Работает и выглядит аналогично другим языкам:

  ```ruby
  # <expr1> ? <expr2> : <expr3>
  v = 3 == 4 ? 1 : 0
  ```

  ## Постфиксный if

  В Ruby иф может стоять не только в начале, но и в конце выражений:

  ```ruby
  doSomething() if num.zero?
  ```

  Подобную форму записи принято использовать тогда, когда все выражение помещается в одну строчку.

  ## Unless

  В дополнение к *if*, в Ruby, есть конструкция *unless*, которая работает в обратную сторону:

  ```ruby
  # Пока (если) something не zero?
  unless something.zero?
    # что-то делаем
  end
  ```

  *unless* позволяет избавляться от отрицаний, но с ним нужно быть осторожным. Если в предикате используется составное логическое выражение, то *unless* становится не читаемым:

  ```ruby
  # Попробуйте осознать этот код
  unless a && b
  end
  ```

instructions: |

  Реализуйте функцию `get_sentence_tone()`, которая принимает строку и определяет тон предложения. Если все символы в верхнем регистре, то это вопль — `'scream'`. В ином случае — нормальное предложение — `'general'`.

  Примеры вызова:

  ```ruby
  get_sentence_tone('Hello') # general
  get_sentence_tone('WOW') # scream
  ```

  Алгоритм:

  1. Сгенерируйте строку в верхнем регистре на основе строки-аргумента с помощью метода `upcase`.
  2. Сравните её с исходной строкой:
      - Если строки равны, значит, строка-аргумент в верхнем регистре.
      - В ином случае — строка-аргумент не в верхнем регистре.

tips: []
