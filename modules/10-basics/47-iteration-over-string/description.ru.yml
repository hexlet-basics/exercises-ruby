---
name: Обход строки
theory: |

  Для закрепления блоков рассмотрим ещё один пример итерации – обход строки. В большинстве языков для обхода строки есть два варианта:

  * Преобразование строки в массив символов и обход этого массива
  * Проход по числам от нуля до длины строки - 1. Обращение к символам по индексу.

  В таких моментах проявляется выразительность Ruby и мощь его встроенной библиотеки. Для обхода строки ничего не нужно придумывать, всё уже встроено:

  ```ruby
  company_name = 'hexlet'
  company_name.each_char do |c| # c – значит char
    puts c
  end
  # h
  # e
  # x
  # l
  # e
  # t
  ```

  Метод [each_char()](https://ruby-doc.org/core-2.7.2/String.html#method-i-each_char) определен именно на строке.

  Ниже чуть более сложный пример с агрегацией. Код, который считает количество букв *e* в строке:

  ```ruby
  company_name = 'hexlet'
  letters_count = 0
  company_name.each_char do |c| # c – значит char
    if c == 'e'
      letters_count += 1
    end
  end
  ```

instructions: |

  Реализуйте функцию `reverse()`, которая переворачивает строку

  ```ruby
  reverse 'hexlet' # telxeh
  reverse 'basics' # scisab
  ```

tips: []
