---

name: Логический тип
theory: |

  ## Логические операторы

  Логический тип в Ruby представлен привычными значениями `true` и `false`, а так же набором операторов `&&` (и), `==` (равно), `||` (или) и `!` (не):

  ```ruby
  true && false # false
  fales || true # true
  ```

  В отличии от многих других языков, сравнение с логическим значением в Ruby строгое, то есть `true` и `false` равны только самим себе:

  ```ruby
  true == 1 # false
  false == nil # false
  ```

  Что не отменяет возможности использовать в логических выражениях значения любых типов:

  ```ruby
  0 && 'one' # "one"
  nil && false # nil
  ```

  В Ruby только `nil` и `false` рассматриваются как *falsey*, все остальные значения в логических выражениях приводятся к `true`.

  ## Значение по умолчанию

  В Ruby широко используется такой код:
  
  ```ruby
  a ||= 'что-то'
  # a = a || 'что-то'
  ```

  Он используется для задания значения по умолчанию. Такое возможно и, почти всегда безопасно, из-за очень ограниченного списка *falsey* значений. Единственное место где этот способ не сработает – там где `false` это допустимое значение.

  ## Предикаты

  В Ruby, в отличии от большинства других языков, принято использовать предикаты практически для всех часто встречающихся проверок. Например, как мы обычно проверяем, что число равно нулю? С помощью сравнения с нулем. В Ruby это тоже работает, но это не Ruby way:

  ```ruby
  0.zero? # true
  1.zero? # false
  2.positive? # true

  # чётное/нечётное
  8.even? # true
  8.odd? # false

  ''.empty? # true
  'wow'.empty? # false

  something.nil?

  # не пустой массив
  items.any?
  # пустой массив
  items.empty?
  ```

instructions: |

  Реализуйте функцию, которая проверяет является ли переданное число четным. Не используйте встроенные функции для определения четности:

  ```ruby
  even?(5) # false
  even?(6) # true
  ```

tips: []
