---

name: Метод fetch и извлечение значений из хеша
theory: |
  В Ruby значения из hash по ключу извлекает метод `[]` и `fetch`. Посмотрим в чем отличие.

  ```ruby
  env = {
    api_key: 123,
    host: 'localhost',
    port: 3000 
  }
  puts env[:user] # -> nil
  puts env.fetch(:user) # ->  получим ошибку key not found (KeyError)
  ```

  Если запрашивать значение по несуществующему ключу, метод `[]` молча возвращает `nil`.

  Не забываем в Ruby - все объект и `[]` метод объекта Hash.
  
  Метод `fetch` же действует иначе - если ключа нет, получим ошибку  КеуError

  Метод `fetch` принимает вторым параметром значение по умалчанию:

  ```ruby
  env = {
    api_key: 123,
    host: 'localhost',
    port: 3000 
  }
  puts env.fetch(:user, nil) # -> nil
  puts env.fetch(:user, 'guest') # ->  'guest'
  ```

  И даже блок или `lambda`:

  ```ruby
  env = { host: 'localhost' }

  env.fetch(:user) {  |key| env[key] = 'guest' }
  puts env # -> { host: 'localhost', user: 'guest' }

  ```

  А вот конфигурация почтовой рассылки из приложения на Ruby on Rails:

  ```ruby
  config.action_mailer.smtp_settings = {
    user_name: ENV.fetch('MAIL_USERNAME', nil),
    password: ENV.fetch('MAIL_PASSWORD', nil),
    address: ENV.fetch('MAIL_HOST', nil),
    domain: ENV.fetch('MAIL_HOST', nil),
    port: ENV.fetch('SMTP_PORT', '25'),
    authentication: :cram_md5
  }
  ```
  Кстати если следовать ruby style guide метод `fetch` приоритетние чем [].

  **[fetch()](https://apidock.com/ruby/Hash/fetch)**

instructions: |
  Реализуйте функцию `setup_env()`.

  Функция принимает: ключ, объект - hash и блок который в свою очередь тоже принимает два параметра - ключ и hash из параметров функции.

  Если переданного ключа нет в hash, вызываем блок, передав в него первым аргументом ключ, а вторым hash, иначе вернуть исходный hash.

  Сдесь понадобится метод `yield`.

  **[yield](https://apidock.com/ruby/Proc/yield)**

  ```ruby
  env = { api_key: 123 }
  setup_env(:host, env) { |env, key|  env[key] = 'localhost' } # -> { api_key: 123, host: 'lockalhost' }
  setup_env(:api_key, env) { |env, key|  env[key] = 'localhost' } # -> { api_key: 123 }
  env == { api_key: 123 } # -> true
  ```

  Функция не изменяет исходный объект.


tips: []
