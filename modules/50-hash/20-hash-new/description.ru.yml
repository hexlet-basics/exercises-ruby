---

name: Hash.new. Задание значений по умолчанию.
theory: |
  В этом уроке мы познакомимся с альтернативными способами создания хеша.

  Вспомним как создавать хеш через литерал:

  ```ruby
  env = {} # пустой хеш
  env = { host: 'example.com' }
  ```

  В Ruby имеется альтернативный способ создания хеша, через вызов метода `new()` у объекта `Hash`:

  ```ruby
  env = Hash.new # создали пустой хеш
  puts(env[:host]) # -> nil
  ```
  Такой способ имеет некоторые преимущества, давайте посмотрим какие:

  ```ruby
  env = Hash.new('localhost')
  puts(env[:user]) # -> 'localhost'
  ```

  Мы передаем в метод `new()` значение localhost, если мы обратимся к несуществующему ключу, то метод `[]` вернет это значение:

  Такое поведение не распространяется на метод `fetch()`:

  ```ruby
  env = Hash.new('loaclhost')
  puts(env.fetch(:host)) # -> key not found: :host (KeyError)
  ```
  Как вы видите, так же будет ошибка: Keyerro.

  Где же хранится значение по умолчанию? Это можно посмотреть вызвать метод `inspect()` видно, что значение не является частью хеша, а является частью экземпляра класса Hash:

  ```ruby
  env = Hash.new('loaclhost')
  puts(env.inspect) # -> {}
  ```

  `Hash.new` может принимать блок кода, который также позволяет задавать ключам значение по умолчанию. Таким образом нам не надо проверять существует ключ или нет:

  ```ruby
  dependensis = Hash.new { |h, key| h[key] = [] }
  dependensis[:simple_form] << 'simple_form_bootstrap'
  puts(dependensis[:simple_form]) # -> ['simple_form_bootstrap']
  ```
  Так же значение по умолчанию можно задавать через метод `default()`:

  ```ruby
  env = Hash.new('localhost')
  puts(env[:host]) # -> localhos
  env.default = 'example.com'
  puts(env[:host]) # -> example.com
  ```
  В этом уроке мы научились создавать хеш альтернативным способом через `Hash.new`. Это бывает полезно когда нам надо инициализировать ключи значением по умолчанию.
  
instructions: |
  Напишите функцию get_adjacency_matrix(), которая строит упрощенный вариант матрицы смежности из друзей человека в социальной сети.

  Функция принимает массив элементами которого является тоже массивы:

  ```ruby
  [[Vasy, Pety],
   [Vasy, Oksana],
   [Vasy, Egor],
   [Egor, Pety],
   [Egor, Georgiy],
   [Oksana, Andrey]]
  ```
  Вложженый массив состоит из: имени человека - первый элемент и имени его друга - второй элемент.

  Функция должна вернуть хеш, ключем которого будет имя человека, а значением - массив из его друзей.

  ```ruby
  {
    'Vasy': ['Pety', 'Oksana', 'Egor'],
    'Egor': ['Pety', 'Georgiy'],
    'Oksana': ['Andrey']
  }
  ```

tips:
  - |
    [Hash.new](https://ruby-doc.org/core-2.5.1/Hash.html)
