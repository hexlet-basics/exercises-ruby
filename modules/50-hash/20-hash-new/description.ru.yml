---

name: Hash.new. Задание значений по умолчанию.
theory: |

  Вспомним из урока Хеши, как создавать хеш через литерал:

  ```ruby
  env = {} # пустой хеш
  env = { host: 'example.com' }
  ```
  Но есть альтернативный способ создания, через Hash.new и такой способ имеет некоторые преимущества.
  Через Hash.new можно задавать значение по умолчанию, которое будет возвращаться если мы обратимся к несуществующему ключу.
  Давайте посмотрим как это работает:

  ```ruby
  env = Hash.new # создание пустого хеша
  env[:host] # -> nil
  env = Hash.new('localhost') # задаем значение по умолчанию
  env[:host] # -> localhos
  env.inspect # -> {}
  ```
  Как видно из примера на четвертой строчке мы обратились к несуществующему ключу и получили не nil, а localhost(значение по умолчанию).
  Но здесь есть один нюанс - значение по умолчанию не является частью хеша.
  Hash.new может принимать блок кода, который также позволяет задавать значения вместо каждого отсутствующего ключа:

  ```ruby
  dependensis = Hash.new { |h, key| h[key] = [] }
  dependensis[:simple_form] << 'simple_form_bootstrap'
  ```
  Таким образом нам не надо даже проверять существует ключ или нет.

  Так же значение по умолчанию можно задавать через метод default:

  ```ruby
  env = Hash.new('localhost')
  env[:host] # -> localhos
  env.default = 'example.com'
  env[:host] # -> example.com
  ```
  Когда все это бывает полезно: например если мы планируем вызывать для возвращенного значения методы, которые для nil не определены.
  **[Hash.new](https://ruby-doc.org/core-2.5.1/Hash.html)** 
instructions: |

  Напишите функцию get_adjacency_matrix(), которая строит матрицу смежности(упрощенный вариан) из друзей человека в социальной сети.
  Функция принимает массив вида:
  ```ruby
  [[Vasy, Pety],
   [Vasy, Oksana],
   [Vasy, Egor],
   [Egor, Pety],
   [Egor, Georgiy],
   [Oksana, Andrey]]
  ```
  Вложенный масив: первый элемент - сам человек, второй его друг.
  И должна вернуть хеш:
  ```ruby
  {
    'Vasy': ['Pety', 'Oksana', 'Egor'],
    'Egor': ['Pety', 'Georgiy'],
    'Oksana': ['Andrey']
  }
  ```

tips: []
